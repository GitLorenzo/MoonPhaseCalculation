/*
--------------------------------------------------------------------------------------------
                                 DISCLAIMER
--------------------------------------------------------------------------------------------
This code is directly inspired from : 
http://www.skyandtelescope.com/wp-content/observing-tools/moonphase/moon.html

I adapted the code for Arduino and used a monochrom display (NOKIA 5110) to show up moon phases.
The main function is moonPhases(int year, int month, int day) where 'year' is a four-digit number.
Although I tested the code (on Arduino Nano) for different dates, and the results were the same 
as those given by the original website, I provide this code without warranty.

Please note that the Bitmaps are for a black/white screen, so a pixel ON would match the unlit 
part of the moon while a pixel OFF matches the illuminated face. If you are using an OLED display, 
you should then invert pixels in the Bitmaps.


*/

//--------------------------------------------------------------------------------------------
//                                 LIBRARY AND DISPLAY SETUP
//--------------------------------------------------------------------------------------------
#include "U8glib.h"

U8GLIB_PCD8544 u8g(8, 9, 11, 10, 12);		// U8GLIB_PCD8544 u8g(SCK, MOSI, CS, DC, RST)
/*
Nokia 5110      Arduino Nano
  VCC ----------- 3.3V
  BL  ----------- 3.3V (Backlight ON)
                  GND  (Backlight OFF)
  GND ----------- GND
  CLK ----------- PIN 8
  DIN ----------- PIN 9 
  DC  ----------- PIN 10
  CE  ----------- PIN 11
  RST ----------- PIN 12
*/

//--------------------------------------------------------------------------------------------
//                                 INPUTS
//--------------------------------------------------------------------------------------------
int timeZone = 2;
int day = 9;
int month = 9;
int year = 2017;

int moonPositionX = 28;
int moonPositionY = 10;

//--------------------------------------------------------------------------------------------
//                                 BITMAPS FOR MOON PHASE
//--------------------------------------------------------------------------------------------

const byte day_0[] PROGMEM = {  // New Moon
  0x0, 0x7F, 0xE0, 0x0,
  0x1, 0xFF, 0xFC, 0x0,
  0x7, 0xFF, 0xFE, 0x0,
  0xF, 0xFF, 0xFF, 0x0,
  0x1F, 0xFF, 0xFF, 0x80,
  0x3F, 0xFF, 0xFF, 0xC0,
  0x3F, 0xFF, 0xFF, 0xE0,
  0x7F, 0xFF, 0xFF, 0xE0,
  0x7F, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF8,
  0xFF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xF0,
  0x7F, 0xFF, 0xFF, 0xF0,
  0x7F, 0xFF, 0xFF, 0xE0,
  0x3F, 0xFF, 0xFF, 0xC0,
  0x1F, 0xFF, 0xFF, 0xC0,
  0xF, 0xFF, 0xFF, 0x80,
  0x7, 0xFF, 0xFF, 0x0,
  0x3, 0xFF, 0xFC, 0x0,
  0x0, 0xFF, 0xF8, 0x0,
  0x0, 0x3F, 0xC0, 0x0,
};

const byte day_1[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xFF, 0xFC, 0x0,
  0x7, 0xFF, 0xFE, 0x0,
  0xF, 0xFF, 0xFD, 0x0,
  0x1F, 0xFF, 0xFE, 0x80,
  0x3F, 0xFF, 0xFF, 0x40,
  0x3F, 0xFF, 0xFF, 0xA0,
  0x7F, 0xFF, 0xFF, 0xA0,
  0x7F, 0xFF, 0xFF, 0xD0,
  0xFF, 0xFF, 0xFF, 0xD0,
  0xFF, 0xFF, 0xFF, 0xD8,
  0xFF, 0xFF, 0xFF, 0xE8,
  0xFF, 0xFF, 0xFF, 0xE8,
  0xFF, 0xFF, 0xFF, 0xE8,
  0xFF, 0xFF, 0xFF, 0xE8,
  0xFF, 0xFF, 0xFF, 0xE8,
  0xFF, 0xFF, 0xFF, 0xE8,
  0xFF, 0xFF, 0xFF, 0xC8,
  0xFF, 0xFF, 0xFF, 0xD0,
  0x7F, 0xFF, 0xFF, 0xD0,
  0x7F, 0xFF, 0xFF, 0xB0,
  0x3F, 0xFF, 0xFF, 0xA0,
  0x3F, 0xFF, 0xFF, 0x40,
  0x1F, 0xFF, 0xFE, 0xC0,
  0xF, 0xFF, 0xFD, 0x80,
  0x7, 0xFF, 0xFF, 0x0,
  0x3, 0xFF, 0xFC, 0x0,
  0x0, 0xFF, 0xF8, 0x0,
  0x0, 0x1F, 0xC0, 0x0,
};

const byte day_2[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xFF, 0xFC, 0x0,
  0x3, 0xFF, 0xF6, 0x0,
  0xF, 0xFF, 0xF9, 0x80,
  0x1F, 0xFF, 0xFC, 0xC0,
  0x1F, 0xFF, 0xFE, 0x40,
  0x3F, 0xFF, 0xFF, 0x20,
  0x7F, 0xFF, 0xFF, 0x30,
  0x7F, 0xFF, 0xFF, 0x10,
  0x7F, 0xFF, 0xFF, 0x98,
  0xFF, 0xFF, 0xFF, 0x98,
  0xFF, 0xFF, 0xFF, 0x88,
  0xFF, 0xFF, 0xFF, 0x88,
  0xFF, 0xFF, 0xFF, 0xC8,
  0xFF, 0xFF, 0xFF, 0xC8,
  0xFF, 0xFF, 0xFF, 0xC8,
  0xFF, 0xFF, 0xFF, 0xC8,
  0xFF, 0xFF, 0xFF, 0x88,
  0xFF, 0xFF, 0xFF, 0x98,
  0x7F, 0xFF, 0xFF, 0x90,
  0x7F, 0xFF, 0xFF, 0x10,
  0x3F, 0xFF, 0xFF, 0x20,
  0x3F, 0xFF, 0xFE, 0x60,
  0x1F, 0xFF, 0xFE, 0xC0,
  0xF, 0xFF, 0xFD, 0x80,
  0x7, 0xFF, 0xFB, 0x0,
  0x3, 0xFF, 0xEE, 0x0,
  0x0, 0xFF, 0xF8, 0x0,
  0x0, 0x1F, 0xC0, 0x0,
};

const byte day_3[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xFF, 0xDC, 0x0,
  0x3, 0xFF, 0xF3, 0x0,
  0xF, 0xFF, 0xF9, 0x80,
  0xF, 0xFF, 0xF8, 0xC0,
  0x1F, 0xFF, 0xFC, 0x40,
  0x3F, 0xFF, 0xFC, 0x20,
  0x3F, 0xFF, 0xFE, 0x10,
  0x7F, 0xFF, 0xFE, 0x10,
  0x7F, 0xFF, 0xFF, 0x10,
  0x7F, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x8,
  0xFF, 0xFF, 0xFF, 0x18,
  0x7F, 0xFF, 0xFE, 0x10,
  0x7F, 0xFF, 0xFE, 0x10,
  0x3F, 0xFF, 0xFE, 0x20,
  0x3F, 0xFF, 0xFC, 0x60,
  0x1F, 0xFF, 0xFC, 0x40,
  0xF, 0xFF, 0xF9, 0x80,
  0x7, 0xFF, 0xF3, 0x0,
  0x1, 0xFF, 0xEE, 0x0,
  0x0, 0xFF, 0xF8, 0x0,
  0x0, 0x1F, 0xC0, 0x0,
};

const byte day_4[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xFF, 0x9C, 0x0,
  0x3, 0xFF, 0xE3, 0x0,
  0x7, 0xFF, 0xF1, 0x80,
  0xF, 0xFF, 0xF0, 0xC0,
  0x1F, 0xFF, 0xF8, 0x60,
  0x3F, 0xFF, 0xF8, 0x20,
  0x3F, 0xFF, 0xFC, 0x10,
  0x7F, 0xFF, 0xFC, 0x10,
  0x7F, 0xFF, 0xFC, 0x8,
  0x7F, 0xFF, 0xFC, 0x8,
  0xFF, 0xFF, 0xFC, 0x8,
  0xFF, 0xFF, 0xFC, 0x8,
  0xFF, 0xFF, 0xFE, 0x8,
  0xFF, 0xFF, 0xFE, 0x8,
  0xFF, 0xFF, 0xFE, 0x8,
  0xFF, 0xFF, 0xFE, 0x8,
  0xFF, 0xFF, 0xFC, 0x8,
  0x7F, 0xFF, 0xFC, 0x8,
  0x7F, 0xFF, 0xFC, 0x18,
  0x7F, 0xFF, 0xFC, 0x10,
  0x3F, 0xFF, 0xF8, 0x30,
  0x1F, 0xFF, 0xF8, 0x60,
  0x1F, 0xFF, 0xF0, 0x40,
  0xF, 0xFF, 0xF0, 0x80,
  0x7, 0xFF, 0xE3, 0x0,
  0x1, 0xFF, 0xC6, 0x0,
  0x0, 0xFF, 0xB8, 0x0,
  0x0, 0x1F, 0xC0, 0x0,
};

const byte day_5[] PROGMEM = {
  0x0, 0x3F, 0xF8, 0x0,
  0x1, 0xFF, 0x8C, 0x0,
  0x3, 0xFF, 0xC3, 0x0,
  0x7, 0xFF, 0xC0, 0x80,
  0xF, 0xFF, 0xE0, 0x40,
  0x1F, 0xFF, 0xE0, 0x20,
  0x3F, 0xFF, 0xE0, 0x30,
  0x3F, 0xFF, 0xF0, 0x10,
  0x7F, 0xFF, 0xF0, 0x18,
  0x7F, 0xFF, 0xF0, 0x8,
  0x7F, 0xFF, 0xF0, 0x8,
  0x7F, 0xFF, 0xF0, 0x8,
  0xFF, 0xFF, 0xF0, 0x8,
  0xFF, 0xFF, 0xF0, 0x8,
  0xFF, 0xFF, 0xF0, 0x8,
  0xFF, 0xFF, 0xF0, 0x8,
  0xFF, 0xFF, 0xF0, 0x8,
  0xFF, 0xFF, 0xF0, 0x8,
  0x7F, 0xFF, 0xF0, 0x8,
  0x7F, 0xFF, 0xF0, 0x18,
  0x3F, 0xFF, 0xF0, 0x10,
  0x3F, 0xFF, 0xF0, 0x30,
  0x1F, 0xFF, 0xE0, 0x20,
  0xF, 0xFF, 0xE0, 0x40,
  0xF, 0xFF, 0xC0, 0x80,
  0x3, 0xFF, 0xC3, 0x0,
  0x1, 0xFF, 0x86, 0x0,
  0x0, 0x7F, 0x38, 0x0,
  0x0, 0x1F, 0xC0, 0x0,
};

const byte day_6[] PROGMEM = {
  0x0, 0xFF, 0xF0, 0x0,
  0x3, 0xFE, 0x18, 0x0,
  0x7, 0xFF, 0x6, 0x0,
  0xF, 0xFF, 0x1, 0x0,
  0x1F, 0xFF, 0x1, 0x80,
  0x3F, 0xFF, 0x0, 0xC0,
  0x3F, 0xFF, 0x0, 0x60,
  0x7F, 0xFF, 0x80, 0x20,
  0xFF, 0xFF, 0x80, 0x30,
  0xFF, 0xFF, 0x80, 0x10,
  0xFF, 0xFF, 0x80, 0x10,
  0xFF, 0xFF, 0x80, 0x18,
  0xFF, 0xFF, 0x80, 0x8,
  0xFF, 0xFF, 0x80, 0x8,
  0xFF, 0xFF, 0x80, 0x8,
  0xFF, 0xFF, 0x80, 0x8,
  0xFF, 0xFF, 0x80, 0x10,
  0xFF, 0xFF, 0x80, 0x10,
  0xFF, 0xFF, 0x80, 0x10,
  0xFF, 0xFF, 0x80, 0x10,
  0x7F, 0xFF, 0x80, 0x20,
  0x7F, 0xFF, 0x80, 0x20,
  0x3F, 0xFF, 0x0, 0x40,
  0x1F, 0xFF, 0x0, 0xC0,
  0xF, 0xFF, 0x1, 0x80,
  0x7, 0xFF, 0x2, 0x0,
  0x3, 0xFE, 0xC, 0x0,
  0x0, 0xFE, 0x70, 0x0,
  0x0, 0x1F, 0x80, 0x0,
};

const byte day_7[] PROGMEM = {  // First Quarter
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xFC, 0x1C, 0x0,
  0x7, 0xFC, 0x6, 0x0,
  0xF, 0xFC, 0x1, 0x0,
  0x1F, 0xFC, 0x0, 0x80,
  0x3F, 0xFC, 0x0, 0x40,
  0x3F, 0xFC, 0x0, 0x60,
  0x7F, 0xFC, 0x0, 0x20,
  0x7F, 0xFC, 0x0, 0x10,
  0xFF, 0xFC, 0x0, 0x10,
  0xFF, 0xFC, 0x0, 0x10,
  0xFF, 0xFC, 0x0, 0x8,
  0xFF, 0xFC, 0x0, 0x8,
  0xFF, 0xFC, 0x0, 0x8,
  0xFF, 0xFC, 0x0, 0x8,
  0xFF, 0xFC, 0x0, 0x8,
  0xFF, 0xFC, 0x0, 0x8,
  0xFF, 0xFC, 0x0, 0x18,
  0xFF, 0xFC, 0x0, 0x10,
  0x7F, 0xFC, 0x0, 0x10,
  0x7F, 0xFC, 0x0, 0x30,
  0x7F, 0xFC, 0x0, 0x20,
  0x3F, 0xFC, 0x0, 0x40,
  0x1F, 0xFC, 0x0, 0xC0,
  0xF, 0xFC, 0x1, 0x80,
  0x7, 0xFC, 0x3, 0x0,
  0x3, 0xFC, 0xC, 0x0,
  0x0, 0xFC, 0x78, 0x0,
  0x0, 0x1F, 0xC0, 0x0,
};

const byte day_8[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xF8, 0xC, 0x0,
  0x7, 0xF8, 0x6, 0x0,
  0xF, 0xF8, 0x1, 0x80,
  0x1F, 0xF0, 0x0, 0x80,
  0x3F, 0xF0, 0x0, 0x40,
  0x3F, 0xF0, 0x0, 0x20,
  0x7F, 0xF0, 0x0, 0x30,
  0x7F, 0xF0, 0x0, 0x10,
  0xFF, 0xF0, 0x0, 0x10,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xE0, 0x0, 0x8,
  0xFF, 0xF0, 0x0, 0x8,
  0xFF, 0xF0, 0x0, 0x10,
  0x7F, 0xF0, 0x0, 0x10,
  0x7F, 0xF0, 0x0, 0x30,
  0x3F, 0xF0, 0x0, 0x20,
  0x3F, 0xF0, 0x0, 0x40,
  0x1F, 0xF0, 0x0, 0xC0,
  0xF, 0xF0, 0x1, 0x80,
  0x7, 0xF8, 0x3, 0x0,
  0x1, 0xF8, 0xC, 0x0,
  0x0, 0xFC, 0x70, 0x0,
  0x0, 0x1F, 0x80, 0x0,
};

const byte day_9[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xF0, 0xC, 0x0,
  0x7, 0xF0, 0x3, 0x0,
  0xF, 0xE0, 0x1, 0x80,
  0x1F, 0xE0, 0x0, 0xC0,
  0x1F, 0xC0, 0x0, 0x40,
  0x3F, 0xC0, 0x0, 0x20,
  0x7F, 0xC0, 0x0, 0x30,
  0x7F, 0xC0, 0x0, 0x10,
  0x7F, 0x80, 0x0, 0x18,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x8,
  0xFF, 0x80, 0x0, 0x18,
  0x7F, 0xC0, 0x0, 0x10,
  0x7F, 0xC0, 0x0, 0x30,
  0x3F, 0xC0, 0x0, 0x20,
  0x3F, 0xC0, 0x0, 0x60,
  0x1F, 0xE0, 0x0, 0xC0,
  0xF, 0xE0, 0x1, 0x80,
  0x7, 0xF0, 0x3, 0x0,
  0x1, 0xF0, 0xC, 0x0,
  0x0, 0xFC, 0x78, 0x0,
  0x0, 0xF, 0xC0, 0x0,
};

const byte day_10[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xF0, 0xC, 0x0,
  0x3, 0xE0, 0x3, 0x0,
  0x7, 0xC0, 0x1, 0x80,
  0xF, 0x80, 0x0, 0xC0,
  0x1F, 0x80, 0x0, 0x60,
  0x3F, 0x0, 0x0, 0x20,
  0x7F, 0x0, 0x0, 0x10,
  0x7F, 0x0, 0x0, 0x10,
  0x7E, 0x0, 0x0, 0x18,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0xFE, 0x0, 0x0, 0x8,
  0x7E, 0x0, 0x0, 0x8,
  0x7F, 0x0, 0x0, 0x10,
  0x7F, 0x0, 0x0, 0x10,
  0x3F, 0x0, 0x0, 0x20,
  0x1F, 0x80, 0x0, 0x60,
  0x1F, 0x80, 0x0, 0xC0,
  0xF, 0xC0, 0x1, 0x80,
  0x7, 0xC0, 0x3, 0x0,
  0x1, 0xE0, 0xE, 0x0,
  0x0, 0x7C, 0x78, 0x0,
  0x0, 0xF, 0xC0, 0x0,
};

const byte day_11[] PROGMEM = {
  0x0, 0x7F, 0xF8, 0x0,
  0x1, 0xE0, 0xE, 0x0,
  0x3, 0xC0, 0x3, 0x0,
  0x7, 0x80, 0x1, 0x80,
  0xF, 0x0, 0x0, 0xC0,
  0x1E, 0x0, 0x0, 0x60,
  0x3E, 0x0, 0x0, 0x20,
  0x3C, 0x0, 0x0, 0x10,
  0x7C, 0x0, 0x0, 0x10,
  0x7C, 0x0, 0x0, 0x8,
  0x7C, 0x0, 0x0, 0x8,
  0xF8, 0x0, 0x0, 0x8,
  0xF8, 0x0, 0x0, 0x8,
  0xF8, 0x0, 0x0, 0x8,
  0xF8, 0x0, 0x0, 0x8,
  0xF8, 0x0, 0x0, 0x8,
  0xF8, 0x0, 0x0, 0x8,
  0xFC, 0x0, 0x0, 0x8,
  0x7C, 0x0, 0x0, 0x8,
  0x7C, 0x0, 0x0, 0x18,
  0x3C, 0x0, 0x0, 0x10,
  0x3E, 0x0, 0x0, 0x30,
  0x1E, 0x0, 0x0, 0x60,
  0xF, 0x0, 0x0, 0x40,
  0xF, 0x80, 0x1, 0x80,
  0x3, 0xC0, 0x3, 0x0,
  0x1, 0xE0, 0xE, 0x0,
  0x0, 0x78, 0x78, 0x0,
  0x0, 0xF, 0xC0, 0x0,
};

const byte day_12[] PROGMEM = {
  0x0, 0xFF, 0xF0, 0x0,
  0x3, 0xC0, 0x1C, 0x0,
  0x7, 0x0, 0x6, 0x0,
  0xE, 0x0, 0x3, 0x0,
  0x1C, 0x0, 0x0, 0x80,
  0x38, 0x0, 0x0, 0xC0,
  0x78, 0x0, 0x0, 0x60,
  0x70, 0x0, 0x0, 0x20,
  0xF0, 0x0, 0x0, 0x30,
  0xE0, 0x0, 0x0, 0x10,
  0xE0, 0x0, 0x0, 0x10,
  0xE0, 0x0, 0x0, 0x10,
  0xE0, 0x0, 0x0, 0x18,
  0xE0, 0x0, 0x0, 0x8,
  0xE0, 0x0, 0x0, 0x8,
  0xE0, 0x0, 0x0, 0x18,
  0xE0, 0x0, 0x0, 0x10,
  0xE0, 0x0, 0x0, 0x10,
  0xE0, 0x0, 0x0, 0x10,
  0xF0, 0x0, 0x0, 0x30,
  0x70, 0x0, 0x0, 0x20,
  0x78, 0x0, 0x0, 0x60,
  0x38, 0x0, 0x0, 0x40,
  0x1C, 0x0, 0x0, 0x80,
  0xE, 0x0, 0x1, 0x0,
  0x7, 0x0, 0x6, 0x0,
  0x3, 0x80, 0x1C, 0x0,
  0x0, 0xF0, 0xF0, 0x0,
  0x0, 0x1F, 0x80, 0x0,
};

const byte day_13[] PROGMEM = {
  0x0, 0xFF, 0xF0, 0x0,
  0x3, 0x80, 0x1C, 0x0,
  0x7, 0x0, 0x6, 0x0,
  0xC, 0x0, 0x1, 0x0,
  0x18, 0x0, 0x0, 0x80,
  0x30, 0x0, 0x0, 0x40,
  0x70, 0x0, 0x0, 0x60,
  0x60, 0x0, 0x0, 0x20,
  0xE0, 0x0, 0x0, 0x10,
  0xC0, 0x0, 0x0, 0x10,
  0xC0, 0x0, 0x0, 0x10,
  0xC0, 0x0, 0x0, 0x18,
  0xC0, 0x0, 0x0, 0x8,
  0xC0, 0x0, 0x0, 0x8,
  0xC0, 0x0, 0x0, 0x8,
  0xC0, 0x0, 0x0, 0x8,
  0xC0, 0x0, 0x0, 0x18,
  0xC0, 0x0, 0x0, 0x10,
  0xC0, 0x0, 0x0, 0x10,
  0xE0, 0x0, 0x0, 0x10,
  0x60, 0x0, 0x0, 0x20,
  0x70, 0x0, 0x0, 0x20,
  0x30, 0x0, 0x0, 0x40,
  0x18, 0x0, 0x0, 0x80,
  0xC, 0x0, 0x1, 0x0,
  0x6, 0x0, 0x6, 0x0,
  0x3, 0x80, 0xC, 0x0,
  0x0, 0xF0, 0x70, 0x0,
  0x0, 0x1F, 0x80, 0x0,
};

const byte day_14[] PROGMEM = { // Full Moon
  0x0, 0xFF, 0xF0, 0x0,
  0x3, 0x80, 0x1C, 0x0,
  0x6, 0x0, 0x6, 0x0,
  0xC, 0x0, 0x1, 0x0,
  0x18, 0x0, 0x0, 0x80,
  0x30, 0x0, 0x0, 0x40,
  0x20, 0x0, 0x0, 0x60,
  0x40, 0x0, 0x0, 0x20,
  0x40, 0x0, 0x0, 0x10,
  0x80, 0x0, 0x0, 0x10,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x8,
  0x80, 0x0, 0x0, 0x8,
  0x80, 0x0, 0x0, 0x8,
  0x80, 0x0, 0x0, 0x8,
  0x80, 0x0, 0x0, 0x8,
  0x80, 0x0, 0x0, 0x8,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x10,
  0x40, 0x0, 0x0, 0x10,
  0x40, 0x0, 0x0, 0x20,
  0x60, 0x0, 0x0, 0x20,
  0x30, 0x0, 0x0, 0x40,
  0x10, 0x0, 0x0, 0x80,
  0x8, 0x0, 0x1, 0x80,
  0x6, 0x0, 0x2, 0x0,
  0x3, 0x80, 0xC, 0x0,
  0x0, 0xF0, 0xF0, 0x0,
  0x0, 0x1F, 0x80, 0x0,
};

const byte day_15[] PROGMEM = {
  0x0, 0x3F, 0xE0, 0x0,
  0x1, 0xC0, 0x38, 0x0,
  0x3, 0x0, 0xE, 0x0,
  0x4, 0x0, 0x3, 0x0,
  0x8, 0x0, 0x1, 0x80,
  0x10, 0x0, 0x0, 0xC0,
  0x20, 0x0, 0x0, 0xE0,
  0x60, 0x0, 0x0, 0x60,
  0x40, 0x0, 0x0, 0x30,
  0xC0, 0x0, 0x0, 0x30,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x30,
  0x40, 0x0, 0x0, 0x30,
  0x40, 0x0, 0x0, 0x70,
  0x60, 0x0, 0x0, 0x60,
  0x20, 0x0, 0x0, 0xE0,
  0x10, 0x0, 0x0, 0xC0,
  0x8, 0x0, 0x1, 0x80,
  0x6, 0x0, 0x3, 0x0,
  0x3, 0x0, 0xE, 0x0,
  0x1, 0xE0, 0x38, 0x0,
  0x0, 0x3F, 0xE0, 0x0,
};

const byte day_16[] PROGMEM = {
  0x0, 0x3F, 0xE0, 0x0,
  0x1, 0xC0, 0x38, 0x0,
  0x3, 0x0, 0xE, 0x0,
  0x4, 0x0, 0x3, 0x0,
  0x8, 0x0, 0x1, 0x80,
  0x10, 0x0, 0x0, 0xC0,
  0x20, 0x0, 0x0, 0xE0,
  0x60, 0x0, 0x0, 0x60,
  0x40, 0x0, 0x0, 0x70,
  0xC0, 0x0, 0x0, 0x70,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x18,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x30,
  0x40, 0x0, 0x0, 0x70,
  0x40, 0x0, 0x0, 0x70,
  0x60, 0x0, 0x0, 0x60,
  0x20, 0x0, 0x0, 0xE0,
  0x10, 0x0, 0x0, 0xC0,
  0x8, 0x0, 0x1, 0x80,
  0x6, 0x0, 0x3, 0x0,
  0x3, 0x0, 0xE, 0x0,
  0x1, 0xE0, 0x38, 0x0,
  0x0, 0x3F, 0xE0, 0x0,
};

const byte day_17[] PROGMEM = {
  0x0, 0x3F, 0xE0, 0x0,
  0x0, 0xC0, 0x3C, 0x0,
  0x3, 0x0, 0xE, 0x0,
  0x4, 0x0, 0x7, 0x0,
  0x8, 0x0, 0x3, 0x80,
  0x10, 0x0, 0x1, 0xC0,
  0x20, 0x0, 0x0, 0xE0,
  0x20, 0x0, 0x0, 0xE0,
  0x40, 0x0, 0x0, 0xF0,
  0x40, 0x0, 0x0, 0x70,
  0x80, 0x0, 0x0, 0x78,
  0x80, 0x0, 0x0, 0x78,
  0x80, 0x0, 0x0, 0x78,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x38,
  0x80, 0x0, 0x0, 0x78,
  0x80, 0x0, 0x0, 0x78,
  0x80, 0x0, 0x0, 0x78,
  0x40, 0x0, 0x0, 0x70,
  0x40, 0x0, 0x0, 0xF0,
  0x20, 0x0, 0x0, 0xE0,
  0x30, 0x0, 0x1, 0xE0,
  0x10, 0x0, 0x1, 0xC0,
  0x8, 0x0, 0x3, 0x80,
  0x6, 0x0, 0x7, 0x0,
  0x3, 0x0, 0xE, 0x0,
  0x0, 0xE0, 0x38, 0x0,
  0x0, 0x3F, 0xE0, 0x0,
};

const byte day_18[] PROGMEM = {
  0x0, 0x3F, 0xF0, 0x0,
  0x0, 0xC0, 0x7C, 0x0,
  0x3, 0x0, 0x3E, 0x0,
  0x6, 0x0, 0x1F, 0x80,
  0xC, 0x0, 0xF, 0xC0,
  0x18, 0x0, 0x7, 0xC0,
  0x30, 0x0, 0x7, 0xE0,
  0x20, 0x0, 0x7, 0xF0,
  0x60, 0x0, 0x3, 0xF0,
  0x40, 0x0, 0x3, 0xF8,
  0x40, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x80, 0x0, 0x3, 0xF8,
  0x40, 0x0, 0x3, 0xF8,
  0x40, 0x0, 0x3, 0xF8,
  0x60, 0x0, 0x3, 0xF0,
  0x20, 0x0, 0x7, 0xF0,
  0x30, 0x0, 0x7, 0xE0,
  0x18, 0x0, 0xF, 0xC0,
  0xC, 0x0, 0xF, 0x80,
  0x6, 0x0, 0x1F, 0x0,
  0x3, 0x0, 0x3E, 0x0,
  0x0, 0xE0, 0x7C, 0x0,
  0x0, 0x3F, 0xE0, 0x0,
};

const byte day_19[] PROGMEM = {
  0x0, 0x3F, 0xF0, 0x0,
  0x0, 0xE0, 0x7C, 0x0,
  0x3, 0x0, 0x3E, 0x0,
  0x6, 0x0, 0x3F, 0x80,
  0xC, 0x0, 0x1F, 0xC0,
  0x18, 0x0, 0x1F, 0xE0,
  0x10, 0x0, 0x1F, 0xE0,
  0x20, 0x0, 0xF, 0xF0,
  0x60, 0x0, 0xF, 0xF0,
  0x40, 0x0, 0xF, 0xF8,
  0x40, 0x0, 0xF, 0xF8,
  0x40, 0x0, 0xF, 0xF8,
  0x80, 0x0, 0xF, 0xF8,
  0x80, 0x0, 0xF, 0xF8,
  0x80, 0x0, 0xF, 0xF8,
  0x80, 0x0, 0xF, 0xF8,
  0x80, 0x0, 0xF, 0xF8,
  0x40, 0x0, 0xF, 0xF8,
  0x40, 0x0, 0xF, 0xF8,
  0x40, 0x0, 0xF, 0xF8,
  0x60, 0x0, 0xF, 0xF0,
  0x20, 0x0, 0xF, 0xF0,
  0x10, 0x0, 0x1F, 0xE0,
  0x18, 0x0, 0x1F, 0xE0,
  0xC, 0x0, 0x1F, 0xC0,
  0x6, 0x0, 0x3F, 0x80,
  0x3, 0x80, 0x7E, 0x0,
  0x0, 0xE0, 0xFC, 0x0,
  0x0, 0x1F, 0xE0, 0x0,
};

const byte day_20[] PROGMEM = {
  0x0, 0x7F, 0xE0, 0x0,
  0x1, 0xC1, 0xF8, 0x0,
  0x7, 0x1, 0xFE, 0x0,
  0xC, 0x0, 0xFF, 0x0,
  0x18, 0x0, 0xFF, 0x80,
  0x30, 0x0, 0xFF, 0xC0,
  0x20, 0x0, 0xFF, 0xC0,
  0x40, 0x0, 0x7F, 0xE0,
  0x40, 0x0, 0x7F, 0xF0,
  0x80, 0x0, 0x7F, 0xF0,
  0x80, 0x0, 0x7F, 0xF0,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF8,
  0x80, 0x0, 0x7F, 0xF0,
  0x80, 0x0, 0x7F, 0xF0,
  0x40, 0x0, 0x7F, 0xE0,
  0x40, 0x0, 0x7F, 0xE0,
  0x20, 0x0, 0xFF, 0xC0,
  0x10, 0x0, 0xFF, 0xC0,
  0x18, 0x0, 0xFF, 0x80,
  0xC, 0x0, 0xFF, 0x0,
  0x3, 0x1, 0xFC, 0x0,
  0x1, 0xC1, 0xF8, 0x0,
  0x0, 0x3F, 0xC0, 0x0,
};

const byte day_21[] PROGMEM = { // Last Quarter
  0x0, 0x3F, 0xE0, 0x0,
  0x1, 0xC3, 0xF8, 0x0,
  0x3, 0x3, 0xFE, 0x0,
  0xC, 0x3, 0xFF, 0x0,
  0x18, 0x3, 0xFF, 0x80,
  0x10, 0x3, 0xFF, 0xC0,
  0x20, 0x3, 0xFF, 0xE0,
  0x60, 0x3, 0xFF, 0xE0,
  0x40, 0x3, 0xFF, 0xF0,
  0xC0, 0x3, 0xFF, 0xF0,
  0x80, 0x3, 0xFF, 0xF0,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF8,
  0x80, 0x3, 0xFF, 0xF0,
  0xC0, 0x3, 0xFF, 0xF0,
  0x40, 0x3, 0xFF, 0xF0,
  0x60, 0x3, 0xFF, 0xE0,
  0x20, 0x3, 0xFF, 0xE0,
  0x10, 0x3, 0xFF, 0xC0,
  0x8, 0x3, 0xFF, 0x80,
  0x6, 0x3, 0xFF, 0x0,
  0x3, 0x3, 0xFE, 0x0,
  0x1, 0xC3, 0xF8, 0x0,
  0x0, 0x3F, 0xE0, 0x0,
};

const byte day_22[] PROGMEM = {
  0x0, 0x7F, 0xE0, 0x0,
  0x1, 0xC7, 0xFC, 0x0,
  0x3, 0x7, 0xFE, 0x0,
  0xC, 0x7, 0xFF, 0x0,
  0x18, 0xF, 0xFF, 0x80,
  0x10, 0xF, 0xFF, 0xC0,
  0x20, 0xF, 0xFF, 0xE0,
  0x60, 0xF, 0xFF, 0xE0,
  0x40, 0xF, 0xFF, 0xF0,
  0xC0, 0xF, 0xFF, 0xF0,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF8,
  0x80, 0x1F, 0xFF, 0xF0,
  0x40, 0xF, 0xFF, 0xF0,
  0x40, 0xF, 0xFF, 0xF0,
  0x60, 0xF, 0xFF, 0xE0,
  0x20, 0xF, 0xFF, 0xE0,
  0x10, 0xF, 0xFF, 0xC0,
  0x8, 0xF, 0xFF, 0x80,
  0x6, 0x7, 0xFF, 0x0,
  0x3, 0x7, 0xFE, 0x0,
  0x0, 0xE3, 0xF8, 0x0,
  0x0, 0x3F, 0xC0, 0x0,
};

const byte day_23[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xC7, 0xFC, 0x0,
  0x3, 0xF, 0xFE, 0x0,
  0x4, 0x1F, 0xFF, 0x0,
  0x8, 0x1F, 0xFF, 0x80,
  0x10, 0x3F, 0xFF, 0xC0,
  0x20, 0x3F, 0xFF, 0xE0,
  0x60, 0x3F, 0xFF, 0xF0,
  0x40, 0x3F, 0xFF, 0xF0,
  0x40, 0x7F, 0xFF, 0xF0,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0x80, 0x7F, 0xFF, 0xF8,
  0xC0, 0x7F, 0xFF, 0xF8,
  0x40, 0x7F, 0xFF, 0xF0,
  0x40, 0x3F, 0xFF, 0xF0,
  0x20, 0x3F, 0xFF, 0xE0,
  0x30, 0x3F, 0xFF, 0xE0,
  0x18, 0x1F, 0xFF, 0xC0,
  0x8, 0x1F, 0xFF, 0x80,
  0x6, 0x1F, 0xFF, 0x0,
  0x3, 0xF, 0xFE, 0x0,
  0x0, 0xE7, 0xF8, 0x0,
  0x0, 0x3F, 0xE0, 0x0,
};

const byte day_24[] PROGMEM = {
  0x0, 0x7F, 0xF0, 0x0,
  0x1, 0xCF, 0xFC, 0x0,
  0x3, 0x1F, 0xFE, 0x0,
  0x4, 0x3F, 0xFF, 0x80,
  0x8, 0x7F, 0xFF, 0xC0,
  0x10, 0x7F, 0xFF, 0xC0,
  0x30, 0xFF, 0xFF, 0xE0,
  0x20, 0xFF, 0xFF, 0xF0,
  0x40, 0xFF, 0xFF, 0xF0,
  0x41, 0xFF, 0xFF, 0xF8,
  0xC1, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0x81, 0xFF, 0xFF, 0xF8,
  0xC1, 0xFF, 0xFF, 0xF8,
  0x41, 0xFF, 0xFF, 0xF0,
  0x40, 0xFF, 0xFF, 0xF0,
  0x20, 0xFF, 0xFF, 0xE0,
  0x30, 0x7F, 0xFF, 0xE0,
  0x18, 0x7F, 0xFF, 0xC0,
  0xC, 0x3F, 0xFF, 0x80,
  0x6, 0x3F, 0xFF, 0x0,
  0x3, 0x9F, 0xFE, 0x0,
  0x0, 0xEF, 0xF8, 0x0,
  0x0, 0x1F, 0xE0, 0x0,
};

const byte day_25[] PROGMEM = {
  0x0, 0x3F, 0xF0, 0x0,
  0x0, 0xDF, 0xFC, 0x0,
  0x3, 0x3F, 0xFF, 0x0,
  0x6, 0x7F, 0xFF, 0x80,
  0x8, 0xFF, 0xFF, 0xC0,
  0x18, 0xFF, 0xFF, 0xE0,
  0x31, 0xFF, 0xFF, 0xE0,
  0x21, 0xFF, 0xFF, 0xF0,
  0x43, 0xFF, 0xFF, 0xF0,
  0x43, 0xFF, 0xFF, 0xF8,
  0x43, 0xFF, 0xFF, 0xF8,
  0xC7, 0xFF, 0xFF, 0xF8,
  0x87, 0xFF, 0xFF, 0xF8,
  0x87, 0xFF, 0xFF, 0xF8,
  0x87, 0xFF, 0xFF, 0xF8,
  0x87, 0xFF, 0xFF, 0xF8,
  0x87, 0xFF, 0xFF, 0xF8,
  0xC3, 0xFF, 0xFF, 0xF8,
  0x43, 0xFF, 0xFF, 0xF8,
  0x43, 0xFF, 0xFF, 0xF8,
  0x63, 0xFF, 0xFF, 0xF0,
  0x21, 0xFF, 0xFF, 0xF0,
  0x11, 0xFF, 0xFF, 0xE0,
  0x18, 0xFF, 0xFF, 0xC0,
  0xC, 0xFF, 0xFF, 0x80,
  0x6, 0x7F, 0xFF, 0x0,
  0x1, 0xBF, 0xFE, 0x0,
  0x0, 0xFF, 0xF8, 0x0,
  0x0, 0x1F, 0xE0, 0x0,
};

const byte day_26[] PROGMEM = {
  0x0, 0x3F, 0xF0, 0x0,
  0x0, 0xFF, 0xFC, 0x0,
  0x3, 0x7F, 0xFF, 0x0,
  0x6, 0xFF, 0xFF, 0x80,
  0xD, 0xFF, 0xFF, 0xC0,
  0x19, 0xFF, 0xFF, 0xE0,
  0x33, 0xFF, 0xFF, 0xE0,
  0x27, 0xFF, 0xFF, 0xF0,
  0x67, 0xFF, 0xFF, 0xF0,
  0x47, 0xFF, 0xFF, 0xF8,
  0x4F, 0xFF, 0xFF, 0xF8,
  0xCF, 0xFF, 0xFF, 0xF8,
  0x8F, 0xFF, 0xFF, 0xF8,
  0x8F, 0xFF, 0xFF, 0xFC,
  0x8F, 0xFF, 0xFF, 0xFC,
  0x8F, 0xFF, 0xFF, 0xFC,
  0xCF, 0xFF, 0xFF, 0xF8,
  0x4F, 0xFF, 0xFF, 0xF8,
  0x4F, 0xFF, 0xFF, 0xF8,
  0x47, 0xFF, 0xFF, 0xF8,
  0x27, 0xFF, 0xFF, 0xF0,
  0x27, 0xFF, 0xFF, 0xF0,
  0x13, 0xFF, 0xFF, 0xE0,
  0x19, 0xFF, 0xFF, 0xE0,
  0xC, 0xFF, 0xFF, 0xC0,
  0x6, 0x7F, 0xFF, 0x80,
  0x1, 0xBF, 0xFE, 0x0,
  0x0, 0xFF, 0xFC, 0x0,
  0x0, 0x1F, 0xE0, 0x0,
};

const byte day_27[] PROGMEM = {
  0x0, 0x3F, 0xF0, 0x0,
  0x0, 0xFF, 0xFC, 0x0,
  0x3, 0xFF, 0xFF, 0x0,
  0x6, 0xFF, 0xFF, 0x80,
  0xD, 0xFF, 0xFF, 0xC0,
  0x1B, 0xFF, 0xFF, 0xE0,
  0x17, 0xFF, 0xFF, 0xF0,
  0x2F, 0xFF, 0xFF, 0xF0,
  0x6F, 0xFF, 0xFF, 0xF8,
  0x5F, 0xFF, 0xFF, 0xF8,
  0x5F, 0xFF, 0xFF, 0xF8,
  0x5F, 0xFF, 0xFF, 0xFC,
  0xDF, 0xFF, 0xFF, 0xFC,
  0xDF, 0xFF, 0xFF, 0xFC,
  0x9F, 0xFF, 0xFF, 0xFC,
  0xDF, 0xFF, 0xFF, 0xFC,
  0x5F, 0xFF, 0xFF, 0xFC,
  0x5F, 0xFF, 0xFF, 0xF8,
  0x5F, 0xFF, 0xFF, 0xF8,
  0x4F, 0xFF, 0xFF, 0xF8,
  0x2F, 0xFF, 0xFF, 0xF0,
  0x3F, 0xFF, 0xFF, 0xF0,
  0x17, 0xFF, 0xFF, 0xE0,
  0xB, 0xFF, 0xFF, 0xE0,
  0x5, 0xFF, 0xFF, 0xC0,
  0x2, 0xFF, 0xFF, 0x80,
  0x1, 0xFF, 0xFE, 0x0,
  0x0, 0x7F, 0xFC, 0x0,
  0x0, 0x1F, 0xE0, 0x0,
};




//--------------------------------------------------------------------------------------------
//                                 VOID SETUP
//--------------------------------------------------------------------------------------------
void setup() {

}


//--------------------------------------------------------------------------------------------
//                                 VOID LOOP
//--------------------------------------------------------------------------------------------
void loop() {

  u8g.firstPage();
  do {
    
      u8g.setContrast(128);
      u8g.setFont(u8g_font_profont11);
      u8g.setPrintPos(2, 15);
      drawMoonPhases();           // call the moonPhases function
      u8g.setFont(u8g_font_5x7);
      printDate(year, month,day);

  } while (u8g.nextPage());


  delay(500);
}




//--------------------------------------------------------------------------------------------
//                                 PROPER ANG
//--------------------------------------------------------------------------------------------
double proper_ang(double big)
{
  double tmp = 0;
  if (big > 0)
  {
    tmp = big / 360.0;
    tmp = (tmp - floor(tmp)) * 360.0;
  }
  else
  {
    tmp = ceil(abs(big / 360.0));
    tmp = big + tmp * 360.0;
  }

  return tmp;
}


//----------------------------------------------------------------------------------------
//                            MOON PHASE CALCULATION
//----------------------------------------------------------------------------------------
int moonPhases(int year, int month, int day)
{
  double jd = julianDat(year, month, day);  // calculate Julian Date
  double dr = PI / 180.0;
  double rd = 1 / dr;
  unsigned long  meeDT = pow((jd - 2382148), 2) / (41048480 * 86400);

  double meeT = (jd + meeDT - 2451545.0) / 36525;
  unsigned long meeT2 = pow(meeT, 2);
  unsigned long meeT3 = pow(meeT, 3);
  double meeD = 297.85 + (445267.1115 * meeT) - (0.0016300 * meeT2) + (meeT3 / 545868);
  meeD = proper_ang(meeD) * dr;
  double meeM1 = 134.96 + (477198.8676 * meeT) + (0.0089970 * meeT2) + (meeT3 / 69699);
  meeM1 = proper_ang(meeM1) * dr;
  double meeM = 357.53 + (35999.0503 * meeT);
  meeM = proper_ang(meeM) * dr;

  double elong = meeD * rd + 6.29 * sin(meeM1);
  elong = elong - 2.10 * sin(meeM);
  elong = elong + 1.27 * sin(2 * meeD - meeM1);
  elong = elong + 0.66 * sin(2 * meeD);
  elong = proper_ang(elong);
  elong = round(elong);
  double moonNum = ((elong + 6.43) / 360) * 28;
  moonNum = floor(moonNum);
  
  if (moonNum == 28)
  {
    moonNum = 0;
  }

  return moonNum;
}

//----------------------------------------------------------------------------------------
//                            DRAW MOON PHASES
//----------------------------------------------------------------------------------------
void drawMoonPhases()
{
  switch (moonPhases(year, month, day))
  {
    case 0: // New moon
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29, day_0 );
      u8g.drawStr( 18, 7, "New Moon");
      break;

    case 1:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29, day_1);
      break;

    case 2:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_2);

      break;

    case 3:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_3);

      break;

    case 4:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_4);

      break;

    case 5:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_5);
      break;

    case 6:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_6);
      break;

    case 7: // First Quarter
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_7);
      u8g.drawStr( 4, 7, "First Quarter");

      break;

    case 8:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_8);
      break;

    case 9:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_9);
      break;

    case 10:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_10);
      break;

    case 11:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_11);
      break;

    case 12:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_12);
      break;

    case 13:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_13);
      break;

    case 14:  // Full Moon
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_14);
      u8g.drawStr( 15, 7, "Full Moon");

      break;

    case 15:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_15);
      break;

    case 16:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_16);
      break;

    case 17:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_17);
      break;

    case 18:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_18);
      break;

    case 19:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_19);
      break;

    case 20:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_20);
      break;

    case 21:  // Last Quarter
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_21);
      u8g.drawStr( 8, 7, "Last Quarter");
      break;

    case 22:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_22);
      break;

    case 23:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_23);
      break;

    case 24:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_24);
      break;

    case 25:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_25);
      break;

    case 26:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_26);
      break;

    case 27:
      u8g.drawStr( 14, 7, "Moon Phase");
      u8g.drawBitmapP( moonPositionX, moonPositionY, 4, 29,  day_27);
      break;


  }
}

//----------------------------------------------------------------------------------------
//                            CALCULATE JULIAN DATE
//----------------------------------------------------------------------------------------
double julianDat(int year, int month, int day) 
{
  double  zone = -(timeZone * 60 / 1440.0);
  
  if (month <= 2)
  {
    year -= 1;
    month += 12;
  }
  double day2 = day + zone + 0.5;
  double A = floor(year / 100.0);
  double B = 2 - A + floor(A / 4.0);
  double JD = floor(365.25 * (year + 4716)) + floor(30.6001 * (month + 1)) + day2 + B - 1524.5;
  return JD;
}


//----------------------------------------------------------------------------------------
//                            PRINT DATE TO DISPLAY
//----------------------------------------------------------------------------------------

int printDate(int year, int month, int day)
{
      if (day < 10)
    {
      u8g.setPrintPos(21, 47);
      u8g.print(day);
      u8g.setPrintPos(16, 47);
      u8g.print(0);    
    }
    else
    {
      u8g.setPrintPos(16, 47);
      u8g.print(day); 
    }
   
    u8g.drawStr( 26, 47, "-");

    if (month < 10)
    {
      u8g.setPrintPos(35, 47);
      u8g.print(month);
      u8g.setPrintPos(30, 47);
      u8g.print(0);    
    }
    else
    {
      u8g.setPrintPos(30, 47);
      u8g.print(month); 
    }

    u8g.drawStr( 40, 47, "-");
    u8g.setPrintPos(45, 47);
    u8g.print(year);

}

